!<arch>
0-isupper.c/    1651649465  10193 10193 100600  0         `
0-memset.c/     1651647671  10193 10193 100600  318       `
#include "main.h"
/**
*_memset - fills memory with const byte
*
*@s: pointer to a string
*@b: The constant byte to be used for replacemnt
*@n: number of bytes
*
*Return: A  pointer
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (i < n)
	{
		*(s + i) = b;
		i++;
	}
	return (s);
}
0-strcat.c/     1651647516  10193 10193 100600  469       `
#include "main.h"
/**
*_strcat- concatinate two strings.
*
*@dest: holds the first string pointer
*@src: holds the secind string string pointer.
*Return: Returns pointer.
*/
char *_strcat(char *dest, char *src)
{
	int len_dest;
	int len_src;

	len_dest = 0;
	while (dest[len_dest] != '\0')
	{
		len_dest++;
	}
	len_src = 0;
	while (src[len_src] != '\0')
	{
		dest[len_dest + len_src] = src[len_src];
		len_src++;
	}

	dest[len_dest + len_src] = '\0';
	return (dest);
}

1-isdigit.c/    1651647007  10193 10193 100600  235       `
#include "main.h"
/**
*_isdigit- checks if a character is digit
*@c: holds the character being checked
*Return: 1 if true and 0 if false
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     1651647737  10193 10193 100600  330       `
#include "main.h"
/**
*_memcpy - fills memory with copied pointer
*
*@dest: pointer to a string
*@src: Pointer to  source string
*@n: number of bytes
*
*Return: A  pointer
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (i < n)
	{
		*(dest + i) = *(src + i);
		i++;
	}
	return (dest);
}
1-strncat.c/    1651647527  10193 10193 100600  531       `
#include "main.h"
/**
*_strncat- concatinate two strings.
*
*@dest: holds the first string pointer
*@src: holds the secind string string pointer.
*@n: Holds number of byte to concated
*Return: Returns pointer.
*/
char *_strncat(char *dest, char *src, int n)
{
	int len_dest;
	int len_src;

	len_dest = 0;
	while (dest[len_dest] != '\0')
	{
		len_dest++;
	}
	len_src = 0;
	while (src[len_src] != '\0' && len_src < n)
	{
		dest[len_dest + len_src] = src[len_src];
		len_src++;
	}

	dest[len_dest + len_src] = '\0';
	return (dest);
}

100-atoi.c/     1651648580  10193 10193 100600  565       `
#include "main.h"
/**
 * is_numerical - check if it is a digit
 * @n: Number being tested
 * Return: 1 if number else  0
 */
int is_numerical(unsigned int n)
{
return (n >= '0' &&  n <= '9');
}

/**
 * _atoi - convert a string to an integer
 *@s: pointer to a String
 * Return: an int
 */
int _atoi(char *s)
{
unsigned int number, i;
int sign;

sign = 1;
number = 0;



for (i = 0; s[i] != '\0'; i++)
{
if (is_numerical(s[i]))
{
number = (s[i] - 48) + number * 10;

if (s[i + 1] == ' ')
break;
}
else if (s[i] == '-')
{
sign *= -1;
}

}

return (number *sign);


}

2-strchr.c/     1651647835  10193 10193 100600  303       `
#include "main.h"
/**
*_strchr - ficd a character in memory
*
*@s: pointer to a string
*@c: character to be found
*
*Return: A  pointer or null
*/
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s  == c)
		{
			return (s);
		}
		++s;
	}
	if (*s == c)
	{
		return (s);

	}
	return (0);

}

2-strlen.c/     1651649504  10193 10193 100600  0         `
2-strncpy.c/    1651647565  10193 10193 100600  544       `
#include "main.h"
/**
*_strncpy- copy n number two strings.
*
*@dest: holds the first string pointer
*@src: holds the secind string string pointer.
*@n: Holds number of byte to concated
*Return: Returns pointer.
*/
char *_strncpy(char *dest, char *src, int n)
{
	int len_dest;
	int len_src;

	len_dest = 0;
	while (dest[len_dest] != '\0')
	{
		len_dest++;
	}
	len_src = 0;
	while (src[len_src] != '\0' && len_src < n)
	{
		dest[len_src] = src[len_src];
		len_src++;
	}
	for (; len_src < n; len_src++)
		dest[len_src] = '\0';

	return (dest);
}
3-islower.c/    1651646896  10193 10193 100600  253       `
#include "main.h"
/**
*_islower - check if  a character is lower case or not
*@c: holds tha parameter being compared
*Return: 1 if true and  0 if false
*/

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       1651648071  10193 10193 100600  178       `
#include "main.h"
#include <stdio.h>
/**
*_puts- prints a string followed by a new line
*@str: Holdes the string
*Return: return nothing
*/
void _puts(char *str)
{
	puts(str);
}
3-strcmp.c/     1651647586  10193 10193 100600  343       `
#include "main.h"
/**
*_strcmp- concatinate two strings.
*
*@s1: holds the first string pointer
*@s2: holds the secind string string pointer.
*Return: Returns an int.
*/
int _strcmp(char *s1, char *s2)
{
	int i = 0;


	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     1651649560  10193 10193 100600  0         `
4-isalpha.c/    1651646916  10193 10193 100600  283       `
#include "main.h"
/**
*_isalpha- Checks if a character is an alphabet
*
*@c: Hold the character being compared
*
*Return: Alawys 1 if true and 0 otherwise
*/
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    1651647794  10193 10193 100600  406       `
#include "main.h"
/**
 * _strpbrk - matches any character specified
 * @s: pointer to the string being checked
 * @accept:points to the character being check for
 *Return: A ointer to string founf
 **/

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s != '\0')
	{
		i = 0;
		while (accept[i] != '\0')
		{
			if (*s == accept[i])
			{
				return (s);
			}

			i++;
		}

		s++;
	}
	return (0);

}
5-strstr.c/     1651647762  10193 10193 100600  473       `
#include "main.h"

/**
 * _strstr - finds 1st occurrence of the substring
 * @haystack: string to be examined
 * @needle: searched in haystack
 * Return: zero or s1
 **/

char  *_strstr(char *haystack, char *needle)
{
	char *s1;
	char *s2;

	while (*haystack != '\0')
	{
		s1 = haystack;
		s2 = needle;

		while (*haystack != '\0' && *s2 != '\0' && *haystack == *s2)
		{
			haystack++;
			s2++;
		}
		if (*s2 == '\0')
			return (s1);
		haystack = s1 + 1;
	}
	return (0);
}

6-abs.c/        1651646707  10193 10193 100600  243       `
#include "main.h"
/**
*_abs- Comutes absolute values
*
*@n: value being compared
*
*Return: Always return the absolute value
*/
int _abs(int n)
{
	if ((n > 0) || (n == 0))
	{
		return (n);
	}
	else
	{
		int b = (n * (-1));

		return (b);
	}
}

_putchar.c/     1651646690  10193 10193 100600  137       `
#include <stdio.h>
/**
*_putchar- print characters on to the standard output
*
*Return: void
*/
void _putchar(char c)
{
putchar('c');
}


9-strcpy.c/     1651650615  10193 10193 100600  0         `
